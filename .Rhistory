summary(lm_norm)
corr(y_norm,x_norm)
hist("child"")
childage <- galton$child
hist(childage)
hist(galton$parent)
par(mfrow=c(1,2))
plot(galton$parent,galton$child)
#regression
y = lm(galton$child~galton$parent, data = galton)
summary(y)
x <- galton$parent
y <- galton$child
b1 = (cor(x,y)*sd(y)/sd(x))
b0 = mean(y)- b1*mean(x)
lml = lm(y~x)
summary(lml) #Here we
rbind(c(b0,b1), coef(y~x))
#Deviations from mean
y_dev = y - mean(y)
x_dev = x - mean(x)
#Normalizing the data
x_norm = (x-mean(x))/sd(x)
y_norm = (y-mean(y))/sd(y)
lm_norm = lm(y_norm~x_norm)
summary(lm_norm)
corr(y,x)
hist("child"")
childage <- galton$child
hist(childage)
hist(galton$parent)
par(mfrow=c(1,2))
plot(galton$parent,galton$child)
#regression
y = lm(galton$child~galton$parent, data = galton)
summary(y)
x <- galton$parent
y <- galton$child
b1 = (cor(x,y)*sd(y)/sd(x))
b0 = mean(y)- b1*mean(x)
lml = lm(y~x)
summary(lml) #Here we
rbind(c(b0,b1), coef(y~x))
#Deviations from mean
y_dev = y - mean(y)
x_dev = x - mean(x)
#Normalizing the data
x_norm = (x-mean(x))/sd(x)
y_norm = (y-mean(y))/sd(y)
lm_norm = lm(y_norm~x_norm)
summary(lm_norm)
cor(y,x)
x_norm = (x-mean(x))/sd(x)
y_norm = (y-mean(y))/sd(y)
lm_norm = lm(y_norm~x_norm)
summary(lm_norm)
cor(y,x)
cor(y,x)
cor(y,x)
plot(x,y)
abline(mean(y)-mean(x))*cor(y,x)*(sd(y)/sd(x), sd(y)/sd(x)*cor(y,x),
lwd=3,col="red")
abline(mean(y)-mean(x)*cor(y,x)*(sd(y)/sd(x), sd(y)/sd(x)*cor(y,x),
abline(mean(y)-mean(x)*cor(y,x)*sd(y)/sd(x), sd(y)/sd(x)*cor(y,x),
lwd=3,col="red")
abline(mean(x)-mean(y)*cor(x,y)*sd(x)/sd(y),sd(x)/sd(y)*cor(x,y),
lwd=3, col="blue")
plot(x,y)+abline(mean(y)-mean(x)*cor(y,x)*sd(y)/sd(x), sd(y)/sd(x)*cor(y,x), lwd=3,col="red")+abline(mean(x)-mean(y)*cor(x,y)*sd(x)/sd(y),sd(x)/sd(y)*cor(x,y),lwd=3, col="blue")+abline(mean(x)-mean(y)*sd(x)/sd(y),sd(x)/sd(y),lwd=3, col="black")
plot(x,y, col="blue")
abline(mean(y)-mean(x)*b1, sd(y)/sd(x)*cor(y,x), lwd=3, col="red")
abline(mean(y)-mean(x)*sd(y)/sd(x)/cor(y,x), sd(y)/cor(y,x)/sd(x),
lwd=3, col="blue")
abline(mean(y)-mean(x)*sd(y)/sd(x), sd(y)/sd(x),
lwd=3, col="black")
points(mean(x), mean(y), cex=2, pch=19)
#regression
lm_c = ln(y_dev,x_dev)
#regression
lm_c = lm(y_dev,x_dev)
#regression
lm_c = lm(y_dev~x_dev)
summary(lm_c)
#Interpreting Results
data(diamond)
diamond
head(diamond)
head(diamond)
#plot fitted regression line and data
y <- diamond$price
x <- diamond$carat
lm_d = lm(y~x)
summary(lm_d)
plot(y,x)
plot(y,x, xlab="Mass(carats)", ylab= "Price(SIN$)", bg="lightblue", col="black",
cex(1.1), pch=21, frame=F)
plot(y,x, xlab="Mass(carats)", ylab= "Price(SIN$)", bg="lightblue", col="black", pch=21, frame=F)
abline(lm(y~x,data=diamond),lwd=2)
abline(lm(y~x,data=diamond),lwd=2)
y_mean <- y - mean(y)
x_mean <- x - mean(x)
lm_mean = (y_mean~x_mean)
summary(lm_mean)
lm_mean = lm(y_mean~x_mean)
summary(lm_mean)
# 2. linear regression
fit <- lm(price~carat, data=diamond)
coef(fit)[1]
coef(fit)[2]
#Estimating the Variance
b1 = cor(y,x)*sd(y)/sd(x)
b1
b0 = (y-mean(y)) - (b1(x-mean(x)))
#Estimating the Variance
b1 = cor(y,x)*sd(y)/sd(x)
b0 = (y-mean(y)) - (b1(x-mean(x)))
b0 = mean(y) - b1*mean(x)
b0
sigma_2 = sum(res^2)/length(y)-2
sigma_2 = sum(res^2)/length(y)-2)
sigma_2 = sum(res^2)/(length(y)-2)
y_pred = b0 + b1(x)
y_pred = b0 + b1*x
res = y - y_pred
sigma_2 = sum(res^2)/(length(y)-2)
sigma_2
sigma_2_b1 = sigma_2 / sum(x-mean(x))^2
sigma_2
sigma_2_b1 = sigma_2 / sum((x-mean(x))^2)
sigma_2_b1
sigma_2_b0 = (1/n + mean(x)^2/sum((x-mean(x))^2))*sigma_2
sigma_2_b0 = (1/length(y) + mean(x)^2/sum((x-mean(x))^2))*sigma_2
#Calculating t-statistic
tstat_b0 = b0/(sigma_2_b0)^(1/2)
tstat_b1 = b0/(sigma_2_b1)^(1/2)
tstat_b1 = b1/(sigma_2_b1)^(1/2)
#Another method
pbeta0 <- 2*pt(abs(tstat_b0), df=n-2, lower.tail = F)
#Another method
pbeta0 <- 2* pt(abs(tstat_b0), df=n-2, lower.tail = F)
#Another method
pbeta0 <- 2* pt(abs(tstat_b0), df=n-2, lower.tail = F)
pbeta0 <- 2* pt(abs(tstat_b0), df=n-2, lower.tail = F)
pbeta0 <- 2* pt(abs(tstat_b0), df=length(y)-2, lower.tail = F)
pbeta0
pbeta1 <- 2* pt(abs(tstat_b1), df=length(y)-2, lower.tail=F)
pbeta1
se(b1) = (sigma_2_b1)^(1/2)
b1_se = (sigma_2_b1)^(1/2)
b0_se = (sigma_2_b0)^(1/2)
#Organizing Results
coef <- rbind(c(b0,b0_se,tstat_b0,pbeta0), c(b1,b1_se,tstat_b1,pbeta1))
#Organizing Results
coefTable <- rbind(c(b0,b0_se,tstat_b0,pbeta0), c(b1,b1_se,tstat_b1,pbeta1))
coefTable
colnames(coefTable) <- c("Estimate", "Std.Error", "t Value", "P(>|t|)")
rownames(coefTable) <- c("(Intercept)", "x")
coefTable
rownames(coefTable) <- c("Intercept", "x")
coefTable
fit <- lm(y~x)
summary(fit)coefficients
summary(fit)
summary(fit)coef
summary(fit)coeff
summary(fit)coefficients.
summary(fit)
coefTable
summary(fit)
#Prediction of outcomes
library(ggplot2)
#Prediction of outcomes
library(ggplot2)
newx = data.frame(x = seq(min(x), max(x), length = 100))
p1 = data.frame(predict(fit, newdata= newx,interval = ("confidence")))
p2 = data.frame(predict(fit, newdata = newx,interval = ("prediction")))
p1$interval = "confidence"
p2$interval = "prediction"
p1$x = newx$x
p2$x = newx$x
dat = rbind(p1, p2)
names(dat)[1] = "y"
g = ggplot(dat, aes(x = x, y = y))
g = g + geom_ribbon(aes(ymin = lwr, ymax = upr, fill = interval), alpha = 0.2)
g = g + geom_line()
g = g + geom_point(data = data.frame(x = x, y=y), aes(x = x, y = y), size = 4)
g
#Multivariate Regression
require(datasets); data(swiss); ?swiss
install.packages("GGally")
library(datasets); data(swiss); require(stats); require(graphics)
pair(swiss, panel=panel.smooth, main="Swiss Data", col= 3+(Swiss$Catholic>50))
pairs(swiss, panel=panel.smooth, main="Swiss Data", col= 3+(Swiss$Catholic>50))
pairs(swiss, panel=panel.smooth, main="Swiss Data", col= 3+(swiss$Catholic>50))
#regression
y <- fertility$swiss
#regression
y <- swiss$fertility
ln_f = lm(y~.)
ln_f = lm(y~., data=swiss)
ln_f = lm(y~., data="swiss")
ln_f = lm(y~., data=swiss)
ln_f = lm(Fertility~., data=swiss)
summary(ln_f)
z <- swiss$Agriculture + swiss$Education
lm(Fertility~. z, data=swiss)
lm(Fertility ~. z, data=swiss)
lm(Fertility ~.+z, data=swiss)
require(datasets); data(InsectSprays); require(stats); require(ggplot2)
summary(lm(count~spray, data=InsectSprays))$coef
View(InsectSprays)
summary(lm(count~spray-1, data=InsectSprays))$coef
summary(lm(count~spray-1, data=InsectSprays))$coef #For regression with all coeff
lm(count ~
I(1 * (spray == 'B')) + I(1 * (spray == 'C')) +
I(1 * (spray == 'D')) + I(1 * (spray == 'E')) +
I(1 * (spray == 'F'))
, data = InsectSprays)
ln_dummy = lm(count ~
I(1 * (spray == 'B')) + I(1 * (spray == 'C')) +
I(1 * (spray == 'D')) + I(1 * (spray == 'E')) +
I(1 * (spray == 'F'))
, data = InsectSprays)
ln_dummy
summary(ln_dummy = lm(count ~
I(1 * (spray == 'B')) + I(1 * (spray == 'C')) +
I(1 * (spray == 'D')) + I(1 * (spray == 'E')) +
I(1 * (spray == 'F'))
, data = InsectSprays))
summary(ln_dummy)
relevel(ln_dummy,B)
relevel(ln_dummy,C)
relevel(ln_dummy,,ref="C")
spray2 <- relevel(InsectSprays$spray, "C")
#Model Selection
fit1 <- lm(Fertility Agriculture, data=swiss)
#Model Selection
fit1 <- lm(Fertility~Agriculture, data=swiss)
fit3 <- update(fit1, Fertility~Agriculture+Examination+Education, data=swiss)
fit5 <- update(fit 1, Fertility~Agriculture+Examination+Education+Catholic+Infant.Mortality, data=swiss)
fit5 <- update(fit1, Fertility~Agriculture+Examination+Education+Catholic+Infant.Mortality, data=swiss)
anova(fit1,fit3,fit5)
clear
clear all
load("/Users/anirudhbharadwaj/Desktop/IP2022/R/ravensData.rda")
beta1 = 1
beta0s= seq(-2,2, by=0.5)
y = 1/ (1 + exp(-1 * (beta0+beta1*x)))
beta0s= seq(-2,2, by=0.5)
y = 1/ (1 + exp(-1 * (beta0+beta1*x)))
y = 1/ (1 + exp(-1 * (beta0s+beta1*x)))
supply(1:5, function(num) num ^3)
sapply(1:5, function(num) num ^3)
beta0 = 0
beta1s= seq(.25,1.5, by=0.1)
y= 1/(1 + exp(-1*(beta0+beta1s*s)))
x <- -10:10; x
beta0 = 0
beta1s= seq(.25,1.5, by=0.1)
y= 1/(1 + exp(-1*(beta0+beta1s*x)))
seq(-10, 10, length.out=1000)
beta0 = 0
beta1s= seq(.25,1.5, by=0.1)
y= 1/(1 + exp(-1*(beta0+beta1s*x)))
seq(-10, 10, length.out=1000)
beta0 = 0
beta1s= seq(.25,1.5, length.out=1000)
y= 1/(1 + exp(-1*(beta0+beta1s*x)))
x<-seq(from = -10, to = 10, by = .02) #make x
drop(beta0)
x<-seq(from = -10, to = 10, by = .02) #make x
beta0 = 0
beta1s = (seq(.25, 1.5, by = .1))
y<-function(i){
1/(1+exp(-1*(beta0+beta1s[i]*x)))
}
plot(x,y(1))
for(i in 1:length(beta1s)){
lines(x,y(i))
}
x = seq(-10,10, length=1000)
beta0s = seq(-2,2,by=0.5); beta1=1
plot(c(-10,10), c(0,1), type="n", xlab = "X", ylab = "Probability", frame = F)
sapply(beta0s, function(beta0) {
y = 1/(1+exp(-1*(beta0+beta1*x)))
lines(x,y,type= "l", lwd = 3)
}
)
x = seq(-10,10, length=1000)
beta0s = seq(-2,2,by=0.5);
beta1=1
plot(c(-10,10), c(0,1), type="n", xlab = "X", ylab = "Probability", frame = F)
sapply(beta0s, function(beta0) {
y = 1/(1+exp(-1*(beta0+beta1*x)))
lines(x,y,type= "l", lwd = 3)
}
)
x<-seq(from = -10, to = 10, by = .02) #make x
beta0 = 0
beta1s = (seq(.25, 1.5, by = .1))
y<-function(i){
1/(1+exp(-1*(beta0+beta1s[i]*x)))
}
plot(x,y(1))
for(i in 1:length(beta1s)){
lines(x,y(i))
}
x = seq(-10,10, length=1000)
beta0 = 0
beta1=1
p= 1/(1+exp(-1*(beta0+beta1*x)))
plot(x,p)
#Simulating data and seeing the fitted value
x = seq(-10,10, length=1000)
beta0 = 0
beta1=1
p= 1/(1+exp(-1*(beta0+beta1*x)))
plot(x,p)
y=rbinom(prob=p, size=1, n=length(p))
fit = glm(y~x, family= binomial)
plot(x,y)
plot(x,p) + plot(x,y)
plot(x,p)
points(x,y)
plot(x,p)
fit = glm(y~x, family= binomial)
points(x,y)
points(x,fit)
points(fit,y)
plot(x,p)
lines(lowess(x,y))
points(x,y)
lines(x, predict(fit))
lines(lowess(x,y))
points(x,y)
plot(x,p)
lines(x, predict(fit))
lines(lowess(x,y))
points(x,y)
lines(x, predict(fit, col = "green"))
lines(lowess(x,y))
plot(x,p)
lines(x, predict(fit, col = "green"))
lines(lowess(x,y))
points(x,y)
#Simulating data and seeing the fitted value
x = seq(-10,10, length=1000)
beta0 = 0
beta1=1
p= 1/(1+exp(-1*(beta0+beta1*x)))
plot(x,p)
y=rbinom(prob=p, size=1, n=length(p))
points(x,y, col = "red")
fit = glm(y~x, family= binomial)
lines(x, predict(fit, col = "green"))
lines(lowess(x,y))
#Simulating data and seeing the fitted value
x = seq(-10,10, length=1000)
beta0 = 0
beta1=1
p= 1/(1+exp(-1*(beta0+beta1*x)))
plot(x,p)
y=rbinom(prob=p, size=1, n=length(p))
points(x,y, col = "red")
fit = glm(y~x, family= binomial)
lines(x, predict(fit, col = "green"))
lines(x, predict(fit, col = "green"), col="blue")
lines(lowess(x,y))
View(ravensData)
View(ravensData)
#Using Raven's Data
rw<- $ravensData$ravenWin
#Using Raven's Data
rw<- ravensData$ravenWin
OLS = lm(rs~rw, data=ravensData)
#Using Raven's Data
rw<- ravensData$ravenWin
rs <- ravensData$ravenScore
OLS = lm(rs~rw, data=ravensData)
summary(OLS)
glm_raven = glm(rs~rw, data=ravensData)
summary(glm_raven)
glm_raven = glm(rs~rw, data=ravensData, family=binomial)
glm_raven = glm(rs~rw,family=binomial)
plot(rs,rw)
plot(rw,rs)
lines(rw,rs)
lines(glm_raven)
lines(rw, predict(fit), col="blue")
anova(log(glm_raven), test="Chisq")
glm_raven = glm(rw~rs, data=ravensData)
summary(glm_raven)
glm_raven = glm(rw~rs, data=ravensData)
summary(glm_raven)
lines(rw, predict(fit), col="blue")
OLS = lm(rw~rs, data=ravensData)
glm_raven = glm(rw~rs, data=ravensData)
glm_raven = glm(rw~rs, data=ravensData, family=binomial)
summary(glm_raven)
lines(rw, predict(fit), col="blue")
lines(rs, predict(fit), col="blue")
anova(log(glm_raven), test="Chisq")
summary(glm_raven)
lines(rs, predict(fit, col="green"), col="blue")
#Using grogger Data
read.dta
#Using grogger Data
install.packages("devtools")
library(devtools)
require(foreign)
grogger <- read.dta("grogger.dta")
setwd("~/Desktop/IP2022/R")
grogger <- read.dta("grogger.dta")
#Using grogger Data
install.packages("devtools")
library(devtools)
install.packages("devtools")
require(foreign)
install.packages("devtools")
grogger <- read.dta("grogger.dta")
View(grogger)
View(grogger)
View(grogger)
View(grogger)
glm_grogger = glm(avgsen~durat, data = grogger, family=poisson)
summary(glm_grogger)
#Matrix Algebra
library(R)
#Matrix Algebra
data(mtcars)
force(mtcars)
View(mtcars)
View(mtcars)
y <- mtcars$mpg
x <- c(1,mtcars$hp,mtcars$wt)
x <- cbind(1,mtcars$hp,mtcars$wt)
lw_mtcars <- lw(y~x, data= mtcars)
lw_mtcars <- ln(y~x, data= mtcars)
lw_mtcars <- lm(y~x, data= mtcars)
summary(mtcars_OLS)
mtcars_OLS <- lm(y~x, data= mtcars)
summary(mtcars_OLS)
t(X)
x_t <- t(X)
beta1 = (x*T(x))^(-1)*T(x)*y
beta1 = (x*t(x))^(-1)*t(x)*y
beta1 = (t(x)*x)^(-1)*t(x)*y
beta1 = solve(t(x)*x)^(-1)*t(x)*y)
beta1 = solve(t(x)%*%x)^(-1)*t(x)*y)
beta1 = solve(t(x)%*%x)^(-1)%*%t(x)%*%y)
beta1 = solve(t(x)%*%x)%*% t(x)%*%y
beta1
e <- e <- (I - x %*% solve(t(x) %*% x) %*% t(x) ) %*% y
e <- (I - x %*% solve(t(x) %*% x) %*% t(x) ) %*% y
e <- (I - x %*% solve(t(x) %*% x) %*% t(x) ) %*% y
install.packages("rvest")
install.packages("tidyverse")
library('rvest')
# Using Le Monde
url = 'https://www.lemonde.com'
# Using Le Monde
url = 'https://www.lemonde.fr'
webpage <- read_html(url)
View(webpage)
title = html_nodes(webpages, '.old__top-article-1 .article__title , .old__area-title')
text_title = html_text(title)
text_title
url = 'https://www.lemonde.fr' #Loading the website to be scraped
webpage <- read_html(url) # Reading the HTML Code from the webpage
#To get the totle of 10 most read pages
title = html_nodes(webpage, '.old__top-article-1 .article__title , .old__area-title')
text_title = html_text(title)
text_title
title = html_nodes(webpage, '.old__article-list-grid')
text_title = html_text(title)
text_title
title = html_nodes(webpage, '..old__top-article.article__title')
text_title = html_text(title)
text_title
#Using NYT
url2 = 'https://nytimes.com'
webpage <- read_html(url2)
#Using NYT
url2 = 'https://nytimes.com'
webpage <- read_html(url2)
title = html_nodes(webpage, '..old__top-article.article__title')
text_title = html_text(title)
text_title
title = html_nodes(webpage, '.css-1pvrrwb')
text_title = html_text(title)
text_title
title = html_nodes(webpage, '.css-1yxzums')
text_title = html_text(title)
text_title
url3 = 'https://www.imdb.com/search/title/?title_type=feature&release_date=1998-01-01,1998-12-31&sort=boxoffice_gross_us,desc'
url3 = 'https://www.imdb.com/search/title/?title_type=feature&release_date=1998-01-01,1998-12-31&sort=boxoffice_gross_us,desc'
webpage <- read_html(url3)
title = html_nodes(webpage, '.text-primary')
text_title = html_text(title)
text_title
rank = html_nodes(webpage, '.text-primary')
text_rank = html_text(rank)
text_rank
as.numeric(text_rank)
url3 = 'https://www.imdb.com/search/title/?title_type=feature&release_date=1998-01-01,1998-12-31&sort=boxoffice_gross_us,desc'
webpage <- read_html(url3)
runtime = html_nodes(webpage, '.runtime')
text_runtime = html_text(runtime)
text_runtime
as.numeric(runtime)
title = html_nodes(webpage, '.lister-item-header a')
text_title = html_text(title)
text_title
